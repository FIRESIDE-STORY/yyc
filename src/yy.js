/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var yy = (function () {
  var o = function (k, v, o, l) {
      for (o = o || {}, l = k.length; l--; o[k[l]] = v);
      return o;
    },
    $V0 = [1, 23],
    $V1 = [1, 11],
    $V2 = [1, 13],
    $V3 = [1, 14],
    $V4 = [1, 15],
    $V5 = [1, 16],
    $V6 = [1, 17],
    $V7 = [1, 18],
    $V8 = [1, 19],
    $V9 = [1, 20],
    $Va = [1, 22],
    $Vb = [1, 21],
    $Vc = [22, 28, 42, 43, 44, 45, 50, 51, 52, 53, 56, 63, 74],
    $Vd = [1, 27],
    $Ve = [1, 28],
    $Vf = [1, 29],
    $Vg = [1, 43],
    $Vh = [1, 47],
    $Vi = [1, 45],
    $Vj = [1, 46],
    $Vk = [1, 57],
    $Vl = [1, 49],
    $Vm = [1, 51],
    $Vn = [1, 50],
    $Vo = [1, 52],
    $Vp = [1, 53],
    $Vq = [1, 54],
    $Vr = [1, 75],
    $Vs = [1, 76],
    $Vt = [1, 81],
    $Vu = [18, 25],
    $Vv = [1, 82],
    $Vw = [1, 83],
    $Vx = [1, 84],
    $Vy = [1, 85],
    $Vz = [1, 86],
    $VA = [1, 88],
    $VB = [1, 87],
    $VC = [1, 89],
    $VD = [1, 90],
    $VE = [1, 91],
    $VF = [1, 92],
    $VG = [
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      18,
      19,
      22,
      25,
      28,
      30,
      31,
      33,
      36,
      37,
      42,
      43,
      44,
      45,
      47,
      50,
      51,
      52,
      53,
      56,
      63,
      74,
    ],
    $VH = [1, 100],
    $VI = [1, 99],
    $VJ = [22, 28, 30, 33, 36, 37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 56, 63, 74],
    $VK = [28, 30, 33, 36, 37, 42, 43, 44, 45, 47, 50, 51, 52, 53],
    $VL = [22, 28, 30, 33, 36, 37, 42, 43, 44, 45, 47, 50, 51, 52, 53],
    $VM = [1, 119],
    $VN = [
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      18,
      22,
      25,
      28,
      30,
      31,
      33,
      36,
      37,
      42,
      43,
      44,
      45,
      47,
      50,
      51,
      52,
      53,
      56,
      63,
      74,
    ],
    $VO = [
      7,
      8,
      11,
      12,
      13,
      14,
      15,
      18,
      22,
      25,
      28,
      30,
      31,
      33,
      36,
      37,
      42,
      43,
      44,
      45,
      47,
      50,
      51,
      52,
      53,
      56,
      63,
      74,
    ],
    $VP = [25, 47],
    $VQ = [22, 47],
    $VR = [11, 12, 13, 14, 15, 18, 22, 25, 28, 30, 31, 33, 36, 37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 56, 63, 74],
    $VS = [1, 158],
    $VT = [1, 162],
    $VU = [1, 163],
    $VV = [1, 167],
    $VW = [30, 33, 47];
  var parser = {
    trace: function trace() {},
    yy: {},
    symbols_: {
      error: 2,
      expression: 3,
      name: 4,
      THIS: 5,
      JSON: 6,
      '+': 7,
      '-': 8,
      '/': 9,
      '*': 10,
      '>': 11,
      '=': 12,
      '<': 13,
      '|': 14,
      '&': 15,
      '!': 16,
      '(': 17,
      ')': 18,
      '%': 19,
      fn_value: 20,
      call_function: 21,
      NAME: 22,
      '.': 23,
      args: 24,
      ',': 25,
      parameters: 26,
      print_expression: 27,
      PRINT: 28,
      case_expression: 29,
      CASE: 30,
      ':': 31,
      common_block: 32,
      DEFAULT: 33,
      match_block: 34,
      return_value: 35,
      RETURN: 36,
      BREAK: 37,
      cover: 38,
      cover_assign: 39,
      literal_statement: 40,
      control_flow: 41,
      LET: 42,
      CONST: 43,
      DEF: 44,
      FN: 45,
      '{': 46,
      '}': 47,
      array: 48,
      ARRAY: 49,
      IF: 50,
      MATCH: 51,
      LOOP: 52,
      EACH: 53,
      FROM: 54,
      module: 55,
      IMPORT: 56,
      STRING: 57,
      AS: 58,
      line: 59,
      CLASSParser: 60,
      program: 61,
      start_scan: 62,
      EOF: 63,
      ERROR: 64,
      NUMBER: 65,
      TRUE: 66,
      FALSE: 67,
      NULL: 68,
      JSONObject: 69,
      JSONObjectMembers: 70,
      JSONObjectPair: 71,
      CLASSFn: 72,
      CLASSBlock: 73,
      CLASS: 74,
      $accept: 0,
      $end: 1,
    },
    terminals_: {
      5: 'THIS',
      7: '+',
      8: '-',
      9: '/',
      10: '*',
      11: '>',
      12: '=',
      13: '<',
      14: '|',
      15: '&',
      16: '!',
      17: '(',
      18: ')',
      19: '%',
      22: 'NAME',
      23: '.',
      25: ',',
      28: 'PRINT',
      30: 'CASE',
      31: ':',
      33: 'DEFAULT',
      36: 'RETURN',
      37: 'BREAK',
      42: 'LET',
      43: 'CONST',
      44: 'DEF',
      45: 'FN',
      46: '{',
      47: '}',
      49: 'ARRAY',
      50: 'IF',
      51: 'MATCH',
      52: 'LOOP',
      53: 'EACH',
      54: 'FROM',
      56: 'IMPORT',
      57: 'STRING',
      58: 'AS',
      63: 'EOF',
      64: 'ERROR',
      65: 'NUMBER',
      66: 'TRUE',
      67: 'FALSE',
      68: 'NULL',
      74: 'CLASS',
    },
    productions_: [
      0,
      [3, 1],
      [3, 1],
      [3, 1],
      [3, 3],
      [3, 3],
      [3, 3],
      [3, 3],
      [3, 3],
      [3, 4],
      [3, 3],
      [3, 4],
      [3, 4],
      [3, 4],
      [3, 4],
      [3, 4],
      [3, 2],
      [3, 3],
      [3, 2],
      [3, 2],
      [3, 1],
      [20, 1],
      [4, 1],
      [4, 3],
      [21, 4],
      [24, 1],
      [24, 3],
      [26, 1],
      [26, 3],
      [27, 4],
      [29, 4],
      [29, 3],
      [34, 1],
      [34, 2],
      [35, 1],
      [35, 1],
      [35, 2],
      [38, 3],
      [39, 1],
      [39, 2],
      [32, 1],
      [32, 1],
      [32, 1],
      [32, 1],
      [32, 1],
      [32, 1],
      [32, 2],
      [32, 2],
      [32, 2],
      [32, 2],
      [40, 4],
      [40, 4],
      [40, 4],
      [40, 10],
      [48, 1],
      [48, 1],
      [41, 7],
      [41, 7],
      [41, 4],
      [41, 9],
      [55, 4],
      [59, 1],
      [59, 1],
      [59, 1],
      [59, 1],
      [59, 1],
      [59, 1],
      [59, 1],
      [61, 1],
      [61, 2],
      [62, 2],
      [2, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [6, 1],
      [69, 2],
      [69, 3],
      [70, 1],
      [70, 3],
      [71, 3],
      [71, 3],
      [72, 7],
      [73, 1],
      [73, 2],
      [60, 5],
    ],
    performAction: function anonymous(
      yytext,
      yyleng,
      yylineno,
      yy,
      yystate /* action[1] */,
      $$ /* vstack */,
      _$ /* lstack */
    ) {
      /* this == yyval */

      var $0 = $$.length - 1;
      switch (yystate) {
        case 1:
        case 3:
        case 38:
          this.$ = $$[$0];
          break;
        case 2:
          this.$ = 'this';
          break;
        case 4:
          this.$ = VM.operators.add($$[$0 - 2], $$[$0]);
          break;
        case 5:
          this.$ = VM.operators.subtract($$[$0 - 2], $$[$0]);
          break;
        case 6:
          this.$ = VM.operators.divide($$[$0 - 2], $$[$0]);
          break;
        case 7:
          this.$ = VM.operators.multiply($$[$0 - 2], $$[$0]);
          break;
        case 8:
          this.$ = VM.operators.gt($$[$0 - 2], $$[$0]);
          break;
        case 9:
          this.$ = VM.operators.gte($$[$0 - 3], $$[$0]);
          break;
        case 10:
          this.$ = VM.operators.lt($$[$0 - 2], $$[$0]);
          break;
        case 11:
          this.$ = VM.operators.lte($$[$0 - 3], $$[$0]);
          break;
        case 12:
          this.$ = VM.operators.eq($$[$0 - 3], $$[$0]);
          break;
        case 13:
          this.$ = VM.operators.or($$[$0 - 3], $$[$0]);
          break;
        case 14:
          this.$ = VM.operators.and($$[$0 - 3], $$[$0]);
          break;
        case 15:
          this.$ = VM.operators.ne($$[$0 - 3], $$[$0]);
          break;
        case 16:
          this.$ = VM.operators.not($$[$0 - 1]);
          break;
        case 17:
        case 39:
          this.$ = $$[$0 - 1];
          break;
        case 18:
          this.$ = $$[$0 - 1] / 100;
          break;
        case 19:
          this.$ = -$$[$0];
          break;
        case 20:
        case 32:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 86:
          this.$ = VM.parse($$[$0]);
          break;
        case 22:
        case 54:
        case 55:
        case 68:
        case 72:
        case 74:
        case 78:
          this.$ = $$[$0];
          break;
        case 23:
          this.$ = $$[$0 - 2] + $$[$0 - 1] + $$[$0];
          break;
        case 24:
          this.$ = { type: 'callFunction', name: $$[$0 - 3], args: $$[$0 - 1] };
          break;
        case 25:
        case 27:
          this.$ = [$$[$0]];
          break;
        case 26:
        case 28:
          $$[$0 - 2].push($$[$0]);
          this.$ = $$[$0 - 2];
          break;
        case 29:
          this.$ = { type: 'callFunction', name: 'print', args: $$[$0 - 1] };
          break;
        case 30:
          this.$ = { type: 'case', when: $$[$0 - 2], fact: $$[$0] };
          break;
        case 31:
          this.$ = { type: 'default', fact: $$[$0] };
          break;
        case 33:
        case 46:
        case 47:
        case 48:
        case 49:
        case 87:
          this.$ = VM.parse($$[$0 - 1]) + VM.parse($$[$0]);
          break;
        case 34:
          this.$ = { type: 'return' };
          break;
        case 35:
          this.$ = { type: 'break' };
          break;
        case 36:
          this.$ = { type: 'return', fact: $$[$0] };
          break;
        case 37:
          this.$ = { type: 'cover', name: $$[$0 - 2], fact: $$[$0] };
          break;
        case 50:
          this.$ = { type: 'let', name: $$[$0 - 2], fact: $$[$0] };
          break;
        case 51:
          this.$ = { type: 'const', name: $$[$0 - 2], fact: $$[$0] };
          break;
        case 52:
          this.$ = { type: 'def', name: $$[$0 - 2], fact: $$[$0] };
          break;
        case 53:
          this.$ = { type: 'fn', name: $$[$0 - 8], args: [$$[$0 - 4]], fact: $$[$0 - 1] };
          break;
        case 56:
          this.$ = { type: 'if', when: $$[$0 - 4], fact: $$[$0 - 1] };
          break;
        case 57:
          this.$ = { type: 'match', when: $$[$0 - 4], fact: $$[$0 - 1] };
          break;
        case 58:
          this.$ = { type: 'loop', fact: $$[$0 - 1] };
          break;
        case 59:
          this.$ = { type: 'each', name: $$[$0 - 6], args: $$[$0 - 4], fact: $$[$0 - 1] };
          break;
        case 60:
          this.$ = { type: 'import', name: $$[$0], args: [$$[$0 - 2]] };
          break;
        case 69:
          this.$ = $$[$0 - 1] + $$[$0];
          break;
        case 70:
          return $$[$0 - 1];
          break;
        case 71:
          this.$ = VM.throwError($$[$0]);
          break;
        case 73:
          this.$ = VM.helper.toNumber($$[$0]);
          break;
        case 75:
          this.$ = true;
          break;
        case 76:
          this.$ = false;
          break;
        case 77:
          this.$ = null;
          break;
        case 79:
          this.$ = {};
          break;
        case 80:
          this.$ = $$[$0 - 1];
          break;
        case 81:
          temp = {};
          temp[$$[$0][0]] = $$[$0][1];
          this.$ = temp;
          break;
        case 82:
          $$[$0 - 2][$$[$0 - 1][0]] = $$[$0 - 1][1];
          this.$ = $$[$0 - 2];
          break;
        case 83:
        case 84:
          this.$ = [$$[$0 - 2], $$[$0]];
          break;
        case 85:
          this.$ = { type: 'classFunction', name: $$[$0 - 6], args: [$$[$0 - 4]], fact: $$[$0 - 1] };
          break;
        case 88:
          this.$ = { type: 'class', name: $$[$0 - 3], fact: $$[$0 - 1] };
          break;
      }
    },
    table: [
      {
        4: 12,
        21: 8,
        22: $V0,
        27: 4,
        28: $V1,
        38: 5,
        40: 6,
        41: 7,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
        55: 10,
        56: $Va,
        59: 3,
        60: 9,
        61: 2,
        62: 1,
        74: $Vb,
      },
      { 1: [3] },
      {
        4: 12,
        21: 8,
        22: $V0,
        27: 4,
        28: $V1,
        38: 5,
        40: 6,
        41: 7,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
        55: 10,
        56: $Va,
        59: 25,
        60: 9,
        63: [1, 24],
        74: $Vb,
      },
      o($Vc, [2, 68]),
      o($Vc, [2, 61]),
      o($Vc, [2, 62]),
      o($Vc, [2, 63]),
      o($Vc, [2, 64]),
      o($Vc, [2, 65]),
      o($Vc, [2, 66]),
      o($Vc, [2, 67]),
      { 17: [1, 26] },
      { 12: $Vd, 17: $Ve, 23: $Vf },
      { 22: [1, 30] },
      { 22: [1, 31] },
      { 22: [1, 32] },
      { 22: [1, 33] },
      { 17: [1, 34] },
      { 17: [1, 35] },
      { 46: [1, 36] },
      { 17: [1, 37] },
      { 22: [1, 38] },
      { 57: [1, 39] },
      o(
        [
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          22,
          23,
          25,
          28,
          30,
          31,
          33,
          36,
          37,
          42,
          43,
          44,
          45,
          47,
          50,
          51,
          52,
          53,
          56,
          63,
          74,
        ],
        [2, 22]
      ),
      { 1: [2, 70] },
      o($Vc, [2, 69]),
      {
        3: 41,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        24: 40,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 58,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 41,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        24: 59,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      { 4: 60, 22: $V0 },
      { 12: [1, 61] },
      { 12: [1, 62] },
      { 12: [1, 63] },
      { 12: [1, 64] },
      {
        3: 65,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 66,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        4: 12,
        21: 71,
        22: $V0,
        27: 69,
        28: $V1,
        32: 67,
        35: 72,
        36: $Vr,
        37: $Vs,
        38: 74,
        39: 68,
        40: 70,
        41: 73,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      { 22: [1, 77] },
      { 46: [1, 78] },
      { 58: [1, 79] },
      { 18: [1, 80], 25: $Vt },
      o($Vu, [2, 25], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        12: $VA,
        13: $VB,
        14: $VC,
        15: $VD,
        16: $VE,
        19: $VF,
      }),
      o($VG, [2, 1], { 17: $Ve, 23: $Vf }),
      o($VG, [2, 2]),
      o($VG, [2, 3]),
      {
        3: 93,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 94,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 95,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      o($VG, [2, 20]),
      o($VG, [2, 72]),
      o($VG, [2, 73]),
      o($VG, [2, 74]),
      o($VG, [2, 75]),
      o($VG, [2, 76]),
      o($VG, [2, 77]),
      o($VG, [2, 78]),
      o($VG, [2, 21]),
      { 22: $VH, 47: [1, 96], 57: $VI, 70: 97, 71: 98 },
      o($VJ, [2, 37], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        12: $VA,
        13: $VB,
        14: $VC,
        15: $VD,
        16: $VE,
        19: $VF,
      }),
      { 18: [1, 101], 25: $Vt },
      o(
        [
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          22,
          25,
          28,
          30,
          31,
          33,
          36,
          37,
          42,
          43,
          44,
          45,
          47,
          50,
          51,
          52,
          53,
          56,
          63,
          74,
        ],
        [2, 23],
        { 23: $Vf }
      ),
      {
        3: 102,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 103,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 104,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      { 11: [1, 105] },
      { 7: $Vv, 8: $Vw, 9: $Vx, 10: $Vy, 11: $Vz, 12: $VA, 13: $VB, 14: $VC, 15: $VD, 16: $VE, 18: [1, 106], 19: $VF },
      { 7: $Vv, 8: $Vw, 9: $Vx, 10: $Vy, 11: $Vz, 12: $VA, 13: $VB, 14: $VC, 15: $VD, 16: $VE, 18: [1, 107], 19: $VF },
      {
        27: 109,
        28: $V1,
        35: 111,
        36: $Vr,
        37: $Vs,
        40: 110,
        41: 112,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        47: [1, 108],
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      o($VK, [2, 40], { 38: 113, 4: 114, 22: $V0 }),
      o($VK, [2, 41]),
      o($VK, [2, 42]),
      o($VK, [2, 43]),
      o($VK, [2, 44]),
      o($VK, [2, 45]),
      o($VL, [2, 38]),
      o($VK, [2, 34], {
        4: 42,
        6: 44,
        20: 48,
        69: 55,
        21: 56,
        3: 115,
        5: $Vg,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
      }),
      o($VK, [2, 35]),
      { 54: [1, 116] },
      { 22: $VM, 72: 118, 73: 117 },
      { 22: [1, 120] },
      o($VJ, [2, 29]),
      {
        3: 121,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 122,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 123,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 124,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 125,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 126,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        12: [1, 127],
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 128,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        12: [1, 129],
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      { 12: [1, 130] },
      { 14: [1, 131] },
      { 15: [1, 132] },
      { 12: [1, 133] },
      o($VG, [2, 18]),
      o($VN, [2, 16], { 16: $VE, 19: $VF }),
      { 7: $Vv, 8: $Vw, 9: $Vx, 10: $Vy, 11: $Vz, 12: $VA, 13: $VB, 14: $VC, 15: $VD, 16: $VE, 18: [1, 134], 19: $VF },
      o($VO, [2, 19], { 9: $Vx, 10: $Vy, 16: $VE, 19: $VF }),
      o($VG, [2, 79]),
      { 25: [1, 136], 47: [1, 135] },
      o($VP, [2, 81]),
      { 31: [1, 137] },
      { 31: [1, 138] },
      o($VG, [2, 24]),
      o($VJ, [2, 50], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        12: $VA,
        13: $VB,
        14: $VC,
        15: $VD,
        16: $VE,
        19: $VF,
      }),
      o($VJ, [2, 51], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        12: $VA,
        13: $VB,
        14: $VC,
        15: $VD,
        16: $VE,
        19: $VF,
      }),
      o($VJ, [2, 52], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        12: $VA,
        13: $VB,
        14: $VC,
        15: $VD,
        16: $VE,
        19: $VF,
      }),
      { 17: [1, 139] },
      { 46: [1, 140] },
      { 46: [1, 141] },
      o($VJ, [2, 58]),
      o($VK, [2, 46]),
      o($VK, [2, 47]),
      o($VK, [2, 48]),
      o($VK, [2, 49]),
      o($VL, [2, 39]),
      { 12: $Vd, 23: $Vf },
      o($VK, [2, 36], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        12: $VA,
        13: $VB,
        14: $VC,
        15: $VD,
        16: $VE,
        19: $VF,
      }),
      { 22: [1, 143], 48: 142, 49: [1, 144] },
      { 22: $VM, 47: [1, 145], 72: 146 },
      o($VQ, [2, 86]),
      { 17: [1, 147] },
      o($Vc, [2, 60]),
      o($Vu, [2, 26], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        12: $VA,
        13: $VB,
        14: $VC,
        15: $VD,
        16: $VE,
        19: $VF,
      }),
      o($VO, [2, 4], { 9: $Vx, 10: $Vy, 16: $VE, 19: $VF }),
      o($VO, [2, 5], { 9: $Vx, 10: $Vy, 16: $VE, 19: $VF }),
      o($VN, [2, 6], { 16: $VE, 19: $VF }),
      o($VN, [2, 7], { 16: $VE, 19: $VF }),
      o($VR, [2, 8], { 7: $Vv, 8: $Vw, 9: $Vx, 10: $Vy, 16: $VE, 19: $VF }),
      {
        3: 148,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      o($VR, [2, 10], { 7: $Vv, 8: $Vw, 9: $Vx, 10: $Vy, 16: $VE, 19: $VF }),
      {
        3: 149,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 150,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 151,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 152,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      {
        3: 153,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      o($VG, [2, 17]),
      o($VG, [2, 80]),
      { 22: $VH, 57: $VI, 71: 154 },
      { 6: 155, 46: $Vk, 49: $Vl, 57: $Vm, 65: $Vn, 66: $Vo, 67: $Vp, 68: $Vq, 69: 55 },
      { 6: 156, 46: $Vk, 49: $Vl, 57: $Vm, 65: $Vn, 66: $Vo, 67: $Vp, 68: $Vq, 69: 55 },
      { 22: $VS, 26: 157 },
      {
        4: 12,
        21: 71,
        22: $V0,
        27: 69,
        28: $V1,
        32: 159,
        35: 72,
        36: $Vr,
        37: $Vs,
        38: 74,
        39: 68,
        40: 70,
        41: 73,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      { 29: 161, 30: $VT, 33: $VU, 34: 160 },
      { 18: [1, 164] },
      { 18: [2, 54] },
      { 18: [2, 55] },
      o($Vc, [2, 88]),
      o($VQ, [2, 87]),
      { 22: $VS, 26: 165 },
      o($VR, [2, 9], { 7: $Vv, 8: $Vw, 9: $Vx, 10: $Vy, 16: $VE, 19: $VF }),
      o($VR, [2, 11], { 7: $Vv, 8: $Vw, 9: $Vx, 10: $Vy, 16: $VE, 19: $VF }),
      o([18, 22, 25, 28, 30, 31, 33, 36, 37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 56, 63, 74], [2, 12], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        12: $VA,
        13: $VB,
        14: $VC,
        15: $VD,
        16: $VE,
        19: $VF,
      }),
      o([12, 14, 15, 18, 22, 25, 28, 30, 31, 33, 36, 37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 56, 63, 74], [2, 13], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        13: $VB,
        16: $VE,
        19: $VF,
      }),
      o([12, 15, 18, 22, 25, 28, 30, 31, 33, 36, 37, 42, 43, 44, 45, 47, 50, 51, 52, 53, 56, 63, 74], [2, 14], {
        7: $Vv,
        8: $Vw,
        9: $Vx,
        10: $Vy,
        11: $Vz,
        13: $VB,
        14: $VC,
        16: $VE,
        19: $VF,
      }),
      o($VN, [2, 15], { 16: $VE, 19: $VF }),
      o($VP, [2, 82]),
      o($VP, [2, 83]),
      o($VP, [2, 84]),
      { 18: [1, 166], 25: $VV },
      o($Vu, [2, 27]),
      {
        27: 109,
        28: $V1,
        35: 111,
        36: $Vr,
        37: $Vs,
        40: 110,
        41: 112,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        47: [1, 168],
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      { 29: 170, 30: $VT, 33: $VU, 47: [1, 169] },
      o($VW, [2, 32]),
      {
        3: 171,
        4: 42,
        5: $Vg,
        6: 44,
        8: $Vh,
        16: $Vi,
        17: $Vj,
        20: 48,
        21: 56,
        22: $V0,
        46: $Vk,
        49: $Vl,
        57: $Vm,
        65: $Vn,
        66: $Vo,
        67: $Vp,
        68: $Vq,
        69: 55,
      },
      { 31: [1, 172] },
      { 46: [1, 173] },
      { 18: [1, 174], 25: $VV },
      { 46: [1, 175] },
      { 22: [1, 176] },
      o($VJ, [2, 56]),
      o($VJ, [2, 57]),
      o($VW, [2, 33]),
      { 7: $Vv, 8: $Vw, 9: $Vx, 10: $Vy, 11: $Vz, 12: $VA, 13: $VB, 14: $VC, 15: $VD, 16: $VE, 19: $VF, 31: [1, 177] },
      {
        4: 12,
        21: 71,
        22: $V0,
        27: 69,
        28: $V1,
        32: 178,
        35: 72,
        36: $Vr,
        37: $Vs,
        38: 74,
        39: 68,
        40: 70,
        41: 73,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      {
        4: 12,
        21: 71,
        22: $V0,
        27: 69,
        28: $V1,
        32: 179,
        35: 72,
        36: $Vr,
        37: $Vs,
        38: 74,
        39: 68,
        40: 70,
        41: 73,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      { 46: [1, 180] },
      {
        4: 12,
        21: 71,
        22: $V0,
        27: 69,
        28: $V1,
        32: 181,
        35: 72,
        36: $Vr,
        37: $Vs,
        38: 74,
        39: 68,
        40: 70,
        41: 73,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      o($Vu, [2, 28]),
      {
        4: 12,
        21: 71,
        22: $V0,
        27: 69,
        28: $V1,
        32: 182,
        35: 72,
        36: $Vr,
        37: $Vs,
        38: 74,
        39: 68,
        40: 70,
        41: 73,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      o($VW, [2, 31], {
        27: 109,
        40: 110,
        35: 111,
        41: 112,
        28: $V1,
        36: $Vr,
        37: $Vs,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      }),
      {
        27: 109,
        28: $V1,
        35: 111,
        36: $Vr,
        37: $Vs,
        40: 110,
        41: 112,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        47: [1, 183],
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      {
        4: 12,
        21: 71,
        22: $V0,
        27: 69,
        28: $V1,
        32: 184,
        35: 72,
        36: $Vr,
        37: $Vs,
        38: 74,
        39: 68,
        40: 70,
        41: 73,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      {
        27: 109,
        28: $V1,
        35: 111,
        36: $Vr,
        37: $Vs,
        40: 110,
        41: 112,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        47: [1, 185],
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      o($VW, [2, 30], {
        27: 109,
        40: 110,
        35: 111,
        41: 112,
        28: $V1,
        36: $Vr,
        37: $Vs,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      }),
      o($VJ, [2, 59]),
      {
        27: 109,
        28: $V1,
        35: 111,
        36: $Vr,
        37: $Vs,
        40: 110,
        41: 112,
        42: $V2,
        43: $V3,
        44: $V4,
        45: $V5,
        47: [1, 186],
        50: $V6,
        51: $V7,
        52: $V8,
        53: $V9,
      },
      o($VJ, [2, 53]),
      o($VQ, [2, 85]),
    ],
    defaultActions: { 24: [2, 70], 143: [2, 54], 144: [2, 55] },
    parseError: function parseError(str, hash) {
      if (hash.recoverable) {
        this.trace(str);
      } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
      }
    },
    parse: function parse(input) {
      var self = this,
        stack = [0],
        tstack = [],
        vstack = [null],
        lstack = [],
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
          sharedState.yy[k] = this.yy[k];
        }
      }
      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;
      if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
      } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
      }
      function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
      }
      _token_stack: var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        if (typeof token !== 'number') {
          token = self.symbols_[token] || token;
        }
        return token;
      };
      var symbol,
        preErrorSymbol,
        state,
        action,
        a,
        r,
        yyval = {},
        p,
        len,
        newState,
        expected;
      while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
          action = this.defaultActions[state];
        } else {
          if (symbol === null || typeof symbol == 'undefined') {
            symbol = lex();
          }
          action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
          var errStr = '';
          expected = [];
          for (p in table[state]) {
            if (this.terminals_[p] && p > TERROR) {
              expected.push("'" + this.terminals_[p] + "'");
            }
          }
          if (lexer.showPosition) {
            errStr =
              'Parse error on line ' +
              (yylineno + 1) +
              ':\n' +
              lexer.showPosition() +
              '\nExpecting ' +
              expected.join(', ') +
              ", got '" +
              (this.terminals_[symbol] || symbol) +
              "'";
          } else {
            errStr =
              'Parse error on line ' +
              (yylineno + 1) +
              ': Unexpected ' +
              (symbol == EOF ? 'end of input' : "'" + (this.terminals_[symbol] || symbol) + "'");
          }
          this.parseError(errStr, {
            text: lexer.match,
            token: this.terminals_[symbol] || symbol,
            line: lexer.yylineno,
            loc: yyloc,
            expected: expected,
          });
        }
        if (action[0] instanceof Array && action.length > 1) {
          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
          case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
              yyleng = lexer.yyleng;
              yytext = lexer.yytext;
              yylineno = lexer.yylineno;
              yyloc = lexer.yylloc;
              if (recovering > 0) {
                recovering--;
              }
            } else {
              symbol = preErrorSymbol;
              preErrorSymbol = null;
            }
            break;
          case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
              first_line: lstack[lstack.length - (len || 1)].first_line,
              last_line: lstack[lstack.length - 1].last_line,
              first_column: lstack[lstack.length - (len || 1)].first_column,
              last_column: lstack[lstack.length - 1].last_column,
            };
            if (ranges) {
              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.apply(
              yyval,
              [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args)
            );
            if (typeof r !== 'undefined') {
              return r;
            }
            if (len) {
              stack = stack.slice(0, -1 * len * 2);
              vstack = vstack.slice(0, -1 * len);
              lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
          case 3:
            return true;
        }
      }
      return true;
    },
  };

  const VM = require('../lib/vm.js');
  /* generated by jison-lex 0.3.4 */
  var lexer = (function () {
    var lexer = {
      EOF: 1,

      parseError: function parseError(str, hash) {
        if (this.yy.parser) {
          this.yy.parser.parseError(str, hash);
        } else {
          throw new Error(str);
        }
      },

      // resets the lexer, sets new input
      setInput: function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
          first_line: 1,
          first_column: 0,
          last_line: 1,
          last_column: 0,
        };
        if (this.options.ranges) {
          this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
      },

      // consumes and returns one char from the input
      input: function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno++;
          this.yylloc.last_line++;
        } else {
          this.yylloc.last_column++;
        }
        if (this.options.ranges) {
          this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
      },

      // unshifts one char (or a string) into the input
      unput: function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
          this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
          first_line: this.yylloc.first_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.first_column,
          last_column: lines
            ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) +
              oldLines[oldLines.length - lines.length].length -
              lines[0].length
            : this.yylloc.first_column - len,
        };

        if (this.options.ranges) {
          this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
      },

      // When called from action, caches matched text and appends it on next action
      more: function () {
        this._more = true;
        return this;
      },

      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
      reject: function () {
        if (this.options.backtrack_lexer) {
          this._backtrack = true;
        } else {
          return this.parseError(
            'Lexical error on line ' +
              (this.yylineno + 1) +
              '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' +
              this.showPosition(),
            {
              text: '',
              token: null,
              line: this.yylineno,
            }
          );
        }
        return this;
      },

      // retain first n characters of the match
      less: function (n) {
        this.unput(this.match.slice(n));
      },

      // displays already matched input, i.e. for error messages
      pastInput: function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, '');
      },

      // displays upcoming input, i.e. for error messages
      upcomingInput: function () {
        var next = this.match;
        if (next.length < 20) {
          next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, '');
      },

      // displays the character position where the lexing error occurred, i.e. for error messages
      showPosition: function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput() + '\n' + c + '^';
      },

      // test the lexed token: return FALSE when not a match, otherwise return token
      test_match: function (match, indexed_rule) {
        var token, lines, backup;

        if (this.options.backtrack_lexer) {
          // save context
          backup = {
            yylineno: this.yylineno,
            yylloc: {
              first_line: this.yylloc.first_line,
              last_line: this.last_line,
              first_column: this.yylloc.first_column,
              last_column: this.yylloc.last_column,
            },
            yytext: this.yytext,
            match: this.match,
            matches: this.matches,
            matched: this.matched,
            yyleng: this.yyleng,
            offset: this.offset,
            _more: this._more,
            _input: this._input,
            yy: this.yy,
            conditionStack: this.conditionStack.slice(0),
            done: this.done,
          };
          if (this.options.ranges) {
            backup.yylloc.range = this.yylloc.range.slice(0);
          }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
          this.yylineno += lines.length;
        }
        this.yylloc = {
          first_line: this.yylloc.last_line,
          last_line: this.yylineno + 1,
          first_column: this.yylloc.last_column,
          last_column: lines
            ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length
            : this.yylloc.last_column + match[0].length,
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
          this.yylloc.range = [this.offset, (this.offset += this.yyleng)];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(
          this,
          this.yy,
          this,
          indexed_rule,
          this.conditionStack[this.conditionStack.length - 1]
        );
        if (this.done && this._input) {
          this.done = false;
        }
        if (token) {
          return token;
        } else if (this._backtrack) {
          // recover context
          for (var k in backup) {
            this[k] = backup[k];
          }
          return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
      },

      // return next match in input
      next: function () {
        if (this.done) {
          return this.EOF;
        }
        if (!this._input) {
          this.done = true;
        }

        var token, match, tempMatch, index;
        if (!this._more) {
          this.yytext = '';
          this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
          tempMatch = this._input.match(this.rules[rules[i]]);
          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
            match = tempMatch;
            index = i;
            if (this.options.backtrack_lexer) {
              token = this.test_match(tempMatch, rules[i]);
              if (token !== false) {
                return token;
              } else if (this._backtrack) {
                match = false;
                continue; // rule action called reject() implying a rule MISmatch.
              } else {
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
              }
            } else if (!this.options.flex) {
              break;
            }
          }
        }
        if (match) {
          token = this.test_match(match, rules[index]);
          if (token !== false) {
            return token;
          }
          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
          return false;
        }
        if (this._input === '') {
          return this.EOF;
        } else {
          return this.parseError(
            'Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(),
            {
              text: '',
              token: null,
              line: this.yylineno,
            }
          );
        }
      },

      // return next match that has a token
      lex: function lex() {
        var r = this.next();
        if (r) {
          return r;
        } else {
          return this.lex();
        }
      },

      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
      begin: function begin(condition) {
        this.conditionStack.push(condition);
      },

      // pop the previously active lexer condition state off the condition stack
      popState: function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
          return this.conditionStack.pop();
        } else {
          return this.conditionStack[0];
        }
      },

      // produce the lexer rule set which is active for the currently active lexer condition state
      _currentRules: function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
          return this.conditions['INITIAL'].rules;
        }
      },

      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
      topState: function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
          return this.conditionStack[n];
        } else {
          return 'INITIAL';
        }
      },

      // alias for begin(condition)
      pushState: function pushState(condition) {
        this.begin(condition);
      },

      // return the number of states currently on the stack
      stateStackSize: function stateStackSize() {
        return this.conditionStack.length;
      },
      options: {},
      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
          case 0 /* skip whitespace */:
            break;
          case 1 /* skip whitespace */:
            break;
          case 2:
            return 44;
            break;
          case 3:
            return 42;
            break;
          case 4:
            return 43;
            break;
          case 5:
            return 45;
            break;
          case 6:
            return 56;
            break;
          case 7:
            return 58;
            break;
          case 8:
            return 28;
            break;
          case 9:
            return 50;
            break;
          case 10:
            return 51;
            break;
          case 11:
            return 30;
            break;
          case 12:
            return 37;
            break;
          case 13:
            return 36;
            break;
          case 14:
            return 33;
            break;
          case 15:
            return 52;
            break;
          case 16:
            return 53;
            break;
          case 17:
            return 54;
            break;
          case 18:
            return 74;
            break;
          case 19:
            return 5;
            break;
          case 20:
            return 44;
            break;
          case 21:
            return 42;
            break;
          case 22:
            return 43;
            break;
          case 23:
            return 45;
            break;
          case 24:
            return 56;
            break;
          case 25:
            return 58;
            break;
          case 26:
            return 28;
            break;
          case 27:
            return 50;
            break;
          case 28:
            return 51;
            break;
          case 29:
            return 30;
            break;
          case 30:
            return 37;
            break;
          case 31:
            return 36;
            break;
          case 32:
            return 33;
            break;
          case 33:
            return 52;
            break;
          case 34:
            return 53;
            break;
          case 35:
            return 54;
            break;
          case 36:
            return 74;
            break;
          case 37:
            return 5;
            break;
          case 38:
            return 57;
            break;
          case 39:
            return 57;
            break;
          case 40:
            return 57;
            break;
          case 41:
            return 49;
            break;
          case 42:
            return 64;
            break;
          case 43:
            return 22;
            break;
          case 44:
            return 22;
            break;
          case 45:
            return 65;
            break;
          case 46:
            return 15;
            break;
          case 47:
            return ' ';
            break;
          case 48:
            return 25;
            break;
          case 49:
            return 10;
            break;
          case 50:
            return 9;
            break;
          case 51:
            return 8;
            break;
          case 52:
            return 7;
            break;
          case 53:
            return '^';
            break;
          case 54:
            return 14;
            break;
          case 55:
            return 17;
            break;
          case 56:
            return 18;
            break;
          case 57:
            return 46;
            break;
          case 58:
            return 47;
            break;
          case 59:
            return 13;
            break;
          case 60:
            return 11;
            break;
          case 61:
            return '`';
            break;
          case 62:
            return '"';
            break;
          case 63:
            return "'";
            break;
          case 64:
            return 16;
            break;
          case 65:
            return 19;
            break;
          case 66:
            return 12;
            break;
          case 67:
            return 31;
            break;
          case 68:
            return 23;
            break;
          case 69:
            return 67;
            break;
          case 70:
            return 66;
            break;
          case 71:
            return 68;
            break;
          case 72:
            return 63;
            break;
        }
      },
      rules: [
        /^(?:\s+)/,
        /^(?:[//^\n].*)/,
        /^(?:定义)/,
        /^(?:变量)/,
        /^(?:常量)/,
        /^(?:函数)/,
        /^(?:引入)/,
        /^(?:作为)/,
        /^(?:打印)/,
        /^(?:如果)/,
        /^(?:匹配)/,
        /^(?:场景)/,
        /^(?:终止)/,
        /^(?:返回)/,
        /^(?:默认)/,
        /^(?:循环)/,
        /^(?:遍历)/,
        /^(?:来自)/,
        /^(?:特征)/,
        /^(?:此)/,
        /^(?:def\b)/,
        /^(?:let\b)/,
        /^(?:const\b)/,
        /^(?:fn\b)/,
        /^(?:import\b)/,
        /^(?:as\b)/,
        /^(?:print\b)/,
        /^(?:if\b)/,
        /^(?:match\b)/,
        /^(?:case\b)/,
        /^(?:break\b)/,
        /^(?:return\b)/,
        /^(?:default\b)/,
        /^(?:while\b)/,
        /^(?:each\b)/,
        /^(?:from\b)/,
        /^(?:class\b)/,
        /^(?:this\b)/,
        /^(?:"(\\["]|[^"])*")/,
        /^(?:'(\\[']|[^'])*')/,
        /^(?:`(\\[`]|[^`])*`)/,
        /^(?:\[(.*)?\])/,
        /^(?:ERROR\b)/,
        /^(?:[a-zA-Z][a-zA-Z0-9?]*)/,
        /^(?:[\u4e00-\u9fa5]+)/,
        /^(?:[0-9]+(\.[0-9]+)??\b)/,
        /^(?:&)/,
        /^(?: )/,
        /^(?:,)/,
        /^(?:\*)/,
        /^(?:\/)/,
        /^(?:-)/,
        /^(?:\+)/,
        /^(?:\^)/,
        /^(?:\|)/,
        /^(?:\()/,
        /^(?:\))/,
        /^(?:\{)/,
        /^(?:\})/,
        /^(?:<)/,
        /^(?:>)/,
        /^(?:`)/,
        /^(?:")/,
        /^(?:')/,
        /^(?:!)/,
        /^(?:%)/,
        /^(?:=)/,
        /^(?::)/,
        /^(?:\.)/,
        /^(?:false\b)/,
        /^(?:true\b)/,
        /^(?:null\b)/,
        /^(?:$)/,
      ],
      conditions: {
        INITIAL: {
          rules: [
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            16,
            17,
            18,
            19,
            20,
            21,
            22,
            23,
            24,
            25,
            26,
            27,
            28,
            29,
            30,
            31,
            32,
            33,
            34,
            35,
            36,
            37,
            38,
            39,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
          ],
          inclusive: true,
        },
      },
    };
    return lexer;
  })();
  parser.lexer = lexer;
  function Parser() {
    this.yy = {};
  }
  Parser.prototype = parser;
  parser.Parser = Parser;
  return new Parser();
})();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = yy;
  exports.Parser = yy.Parser;
  exports.parse = function () {
    return yy.parse.apply(yy, arguments);
  };
  exports.main = function commonjsMain(args) {
    if (!args[1]) {
      console.log('Usage: ' + args[0] + ' FILE');
      process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), 'utf8');
    return exports.parser.parse(source);
  };
  if (typeof module !== 'undefined' && require.main === module) {
    exports.main(process.argv.slice(1));
  }
}
